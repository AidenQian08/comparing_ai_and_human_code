#include <iostream>
#include <vector>
#include <stack>
using namespace std;

const int MAXN = 100005;
vector<int> adj[MAXN], rev_adj[MAXN];
vector<int> order, component;
bool visited[MAXN];
int scc_count = 0;

void dfs1(int u) {
    visited[u] = true;
    for (int v : adj[u]) {
        if (!visited[v])
            dfs1(v);
    }
    order.push_back(u);
}

void dfs2(int u) {
    visited[u] = true;
    component.push_back(u);
    for (int v : rev_adj[u]) {
        if (!visited[v])
            dfs2(v);
    }
}

int main() {
    int n, m;
    cin >> n >> m;
    vector<pair<int, int>> edges(m);

    // Input the edges and create adjacency list for the graph and its reverse
    for (int i = 0; i < m; ++i) {
        int a, b;
        cin >> a >> b;
        edges[i] = {a, b};
        adj[a].push_back(b);
        rev_adj[b].push_back(a);
    }

    // Kosaraju's Algorithm to find Strongly Connected Components (SCC)
    fill(visited, visited + n + 1, false);
    for (int i = 1; i <= n; ++i) {
        if (!visited[i])
            dfs1(i);
    }

    fill(visited, visited + n + 1, false);
    for (int i = n; i >= 1; --i) {
        int u = order[n - i];
        if (!visited[u]) {
            component.clear();
            dfs2(u);
            scc_count++;
            if (scc_count > 1) {
                cout << "IMPOSSIBLE" << endl;
                return 0;
            }
        }
    }

    // If we reach here, it means the graph can be directed to be strongly connected
    for (auto [a, b] : edges) {
        cout << a << " " << b << endl;
    }

    return 0;
}

New Solution

#include <iostream>
#include <vector>
using namespace std;

struct SegmentTree {
    struct Node {
        long long sum, max_prefix_sum;

        Node() : sum(0), max_prefix_sum(0) {}
    };

    int n;
    vector<Node> tree;

    SegmentTree(int n) : n(n), tree(4 * n) {}

    Node combine(const Node& left, const Node& right) {
        Node res;
        res.sum = left.sum + right.sum;
        res.max_prefix_sum = max(left.max_prefix_sum, left.sum + right.max_prefix_sum);
        return res;
    }

    void build(const vector<long long>& arr, int v, int tl, int tr) {
        if (tl == tr) {
            tree[v].sum = arr[tl];
            tree[v].max_prefix_sum = max(0LL, arr[tl]);
        } else {
            int tm = (tl + tr) / 2;
            build(arr, 2 * v, tl, tm);
            build(arr, 2 * v + 1, tm + 1, tr);
            tree[v] = combine(tree[2 * v], tree[2 * v + 1]);
        }
    }

    void update(int v, int tl, int tr, int pos, long long new_val) {
        if (tl == tr) {
            tree[v].sum = new_val;
            tree[v].max_prefix_sum = max(0LL, new_val);
        } else {
            int tm = (tl + tr) / 2;
            if (pos <= tm)
                update(2 * v, tl, tm, pos, new_val);
            else
                update(2 * v + 1, tm + 1, tr, pos, new_val);
            tree[v] = combine(tree[2 * v], tree[2 * v + 1]);
        }
    }

    Node query(int v, int tl, int tr, int l, int r) {
        if (l > r)
            return Node();
        if (l == tl && r == tr)
            return tree[v];
        int tm = (tl + tr) / 2;
        return combine(query(2 * v, tl, tm, l, min(r, tm)),
                       query(2 * v + 1, tm + 1, tr, max(l, tm + 1), r));
    }

    void update(int pos, long long new_val) {
        update(1, 0, n - 1, pos, new_val);
    }

    long long max_prefix_sum(int l, int r) {
        return query(1, 0, n - 1, l, r).max_prefix_sum;
    }
};

int main() {
    int n, q;
    cin >> n >> q;
    vector<long long> arr(n);
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }

    SegmentTree segtree(n);
    segtree.build(arr, 1, 0, n - 1);

    for (int i = 0; i < q; ++i) {
        int type;
        cin >> type;
        if (type == 1) {
            int k;
            long long u;
            cin >> k >> u;
            segtree.update(k - 1, u);
        } else if (type == 2) {
            int a, b;
            cin >> a >> b;
            cout << segtree.max_prefix_sum(a - 1, b - 1) << endl;
        }
    }

    return 0;
}

New Solution

#include <iostream>
#include <vector>
#include <stack>
using namespace std;

const int MAXN = 50005;

vector<int> adj[MAXN];
vector<int> rev_adj[MAXN];  // Reversed graph
vector<int> order;
bool visited[MAXN];
int reachable[MAXN];
int n, m;

void dfs1(int u) {
    visited[u] = true;
    for (int v : adj[u]) {
        if (!visited[v])
            dfs1(v);
    }
    order.push_back(u);
}

void dfs2(int u) {
    visited[u] = true;
    reachable[u] = 1;  // The node itself is reachable
    for (int v : rev_adj[u]) {
        if (!visited[v]) {
            dfs2(v);
        }
        reachable[u] += reachable[v];  // Add reachable nodes from its children
    }
}

int main() {
    cin >> n >> m;
    
    // Input graph edges
    for (int i = 0; i < m; ++i) {
        int a, b;
        cin >> a >> b;
        adj[a].push_back(b);
        rev_adj[b].push_back(a);  // For the reverse traversal
    }

    // Step 1: Perform DFS on the original graph to get the topological order
    fill(visited, visited + n + 1, false);
    for (int i = 1; i <= n; ++i) {
        if (!visited[i])
            dfs1(i);
    }

    // Step 2: Perform DFS on the reverse graph in the order of topological sort
    fill(visited, visited + n + 1, false);
    for (int i = n - 1; i >= 0; --i) {
        if (!visited[order[i]]) {
            dfs2(order[i]);
        }
    }

    // Output the result for each node
    for (int i = 1; i <= n; ++i) {
        cout << reachable[i] << " ";
    }
    cout << endl;

    return 0;
}

New Solution

#include <iostream>
#include <vector>
using namespace std;

int main() {
    int n;
    cin >> n;
    vector<long long> arr(n);

    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }

    long long moves = 0;

    for (int i = 1; i < n; ++i) {
        if (arr[i] < arr[i - 1]) {
            moves += arr[i - 1] - arr[i];
            arr[i] = arr[i - 1];  // Make it non-decreasing
        }
    }

    cout << moves << endl;

    return 0;
}

New Solution

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const long long INF = 1e18;
const int MAXN = 3005;

int n, k;
vector<int> children(MAXN);
vector<vector<long long>> dp(MAXN, vector<long long>(MAXN, INF));
vector<vector<long long>> cost(MAXN, vector<long long>(MAXN, 0));

// Function to precompute the cost of placing a school between houses l and r
void precompute_costs() {
    for (int l = 1; l <= n; ++l) {
        for (int r = l; r <= n; ++r) {
            int median = (l + r) / 2;
            for (int i = l; i <= r; ++i) {
                cost[l][r] += 1LL * children[i] * abs(i - median);
            }
        }
    }
}

int main() {
    cin >> n >> k;
    for (int i = 1; i <= n; ++i) {
        cin >> children[i];
    }

    // Precompute the costs for placing schools in any range of houses
    precompute_costs();

    // Initialize dp for one school
    dp[0][0] = 0;
    
    // Dynamic Programming to compute the minimum total walking distance
    for (int schools = 1; schools <= k; ++schools) {
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j < i; ++j) {
                dp[i][schools] = min(dp[i][schools], dp[j][schools - 1] + cost[j + 1][i]);
            }
        }
    }

    // The answer is the minimum total walking distance with k schools and n houses
    cout << dp[n][k] << endl;

    return 0;
}

New Solution

#include <iostream>
#include <vector>
using namespace std;

const int MAXN = 200005;

vector<int> adj[MAXN];
long long result = 0;
int k1, k2;

void dfs(int u, int parent, vector<int>& count, vector<int>& paths) {
    paths[0] = 1;  // Start with the node itself
    for (int v : adj[u]) {
        if (v != parent) {
            vector<int> new_paths(k2 + 1, 0);
            dfs(v, u, count, new_paths);

            for (int i = k1; i <= k2; ++i) {
                result += count[i];  // Count valid paths
            }

            for (int i = 0; i < k2; ++i) {
                new_paths[i + 1] += paths[i];  // Update paths count
            }
        }
    }
}

int main() {
    int n;
    cin >> n >> k1 >> k2;

    for (int i = 0; i < n - 1; ++i) {
        int a, b;
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }

    vector<int> count(k2 + 1, 0);
    dfs(1, -1, count, count);

    cout << result << endl;

    return 0;
}

New Solution

#include <iostream>
#include <vector>
using namespace std;

const int MAXN = 200005;

vector<int> adj[MAXN];
long long result = 0;
int k;

void dfs(int u, int parent, vector<int>& count) {
    count[0] = 1;  // Start with the node itself
    for (int v : adj[u]) {
        if (v != parent) {
            vector<int> new_paths(k + 1, 0);
            dfs(v, u, new_paths);

            for (int i = 0; i < k; ++i) {
                result += (long long)count[i] * new_paths[k - i - 1];  // Count valid paths
            }

            for (int i = 0; i < k; ++i) {
                count[i + 1] += new_paths[i];  // Update paths count
            }
        }
    }
}

int main() {
    int n;
    cin >> n >> k;

    for (int i = 0; i < n - 1; ++i) {
        int a, b;
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }

    vector<int> count(k + 1, 0);
    dfs(1, -1, count);

    cout << result << endl;

    return 0;
}

New Solution

#include <iostream>
#include <vector>
#include <set>
using namespace std;

const int MAXN = 200005;
vector<int> adj[MAXN];       // Adjacency list for the tree
int colors[MAXN];            // Color of each node
set<int> *color_sets[MAXN];  // Set of distinct colors for each subtree
int result[MAXN];            // Result array to store number of distinct colors for each node

// DFS function to calculate distinct colors in the subtree
void dfs(int node, int parent) {
    color_sets[node] = new set<int>();   // Create a set for the current node
    color_sets[node]->insert(colors[node]);  // Insert the node's own color
    
    for (int neighbor : adj[node]) {
        if (neighbor == parent) continue;  // Skip the parent node
        
        dfs(neighbor, node);  // Recursively DFS to children
        
        // Merge the smaller set into the larger set
        if (color_sets[neighbor]->size() > color_sets[node]->size()) {
            swap(color_sets[neighbor], color_sets[node]);
        }
        
        // Insert all colors from the child's set into the current node's set
        for (int color : *color_sets[neighbor]) {
            color_sets[node]->insert(color);
        }
    }
    
    // The size of the set is the number of distinct colors in the subtree
    result[node] = color_sets[node]->size();
}

int main() {
    int n;
    cin >> n;
    
    // Input colors
    for (int i = 1; i <= n; ++i) {
        cin >> colors[i];
    }
    
    // Input edges
    for (int i = 0; i < n - 1; ++i) {
        int a, b;
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    
    // Perform DFS starting from node 1
    dfs(1, -1);
    
    // Output the result for each node
    for (int i = 1; i <= n; ++i) {
        cout << result[i] << " ";
    }
    cout << endl;

    return 0;
}

New Solution

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

const int MAXN = 300005;
vector<int> adj[MAXN];  // Adjacency list
int depth[MAXN];        // Depth of each node
int parent[MAXN][20];   // Parent array for binary lifting

void dfs(int u, int p) {
    parent[u][0] = p;  // Direct parent
    for (int i = 1; i < 20; ++i) {
        parent[u][i] = parent[parent[u][i - 1]][i - 1];  // Binary lifting
    }

    for (int v : adj[u]) {
        if (v != p) {
            depth[v] = depth[u] + 1;
            dfs(v, u);
        }
    }
}

int lca(int u, int v) {
    if (depth[u] < depth[v]) swap(u, v);

    // Lift u to the same level as v
    for (int i = 19; i >= 0; --i) {
        if (depth[u] - (1 << i) >= depth[v]) {
            u = parent[u][i];
        }
    }

    if (u == v) return u;

    for (int i = 19; i >= 0; --i) {
        if (parent[u][i] != parent[v][i]) {
            u = parent[u][i];
            v = parent[v][i];
        }
    }

    return parent[u][0];
}

int move_towards(int u, int v, int dist) {
    if (dist == 0) return u;

    for (int i = 19; i >= 0; --i) {
        if (dist >= (1 << i)) {
            u = parent[u][i];
            dist -= (1 << i);
        }
    }

    return u;
}

int main() {
    int n;
    cin >> n;

    for (int i = 0; i < n - 1; ++i) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    // Preprocess depth and binary lifting
    depth[1] = 0;
    dfs(1, 1);

    int q;
    cin >> q;

    while (q--) {
        int a, b, c;
        cin >> a >> b >> c;

        int l = lca(a, b);
        int dist_a_to_lca = depth[a] - depth[l];
        int dist_b_to_lca = depth[b] - depth[l];
        int total_dist = dist_a_to_lca + dist_b_to_lca;

        if (c >= total_dist) {
            cout << b << endl;
        } else if (c <= dist_a_to_lca) {
            cout << move_towards(a, l, c) << endl;
        } else {
            cout << move_towards(b, l, total_dist - c) << endl;
        }
    }

    return 0;
}

New Solution

#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

int main() {
    int n;
    cin >> n;
    
    vector<int> arr(n);
    unordered_map<int, int> dp;  // To track the length of the sequence
    unordered_map<int, int> prev_index;  // To track the previous index in the sequence

    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }

    int max_length = 0, last_value = 0;

    // Dynamic Programming to find the maximum length of consecutive sequence
    for (int i = 0; i < n; ++i) {
        dp[arr[i]] = dp[arr[i] - 1] + 1;
        prev_index[arr[i]] = i;

        if (dp[arr[i]] > max_length) {
            max_length = dp[arr[i]];
            last_value = arr[i];
        }
    }

    // Recover the indices of the subsequence
    vector<int> result_indices;
    int value = last_value;
    
    for (int i = 0; i < max_length; ++i) {
        result_indices.push_back(prev_index[value] + 1);  // +1 to convert to 1-based index
        value--;
    }

    // Output the result
    cout << max_length << endl;
    for (int i = max_length - 1; i >= 0; --i) {
        cout << result_indices[i] << " ";
    }
    cout << endl;

    return 0;
}

New Solution

#include <iostream>
#include <vector>
#include <queue>
#include <string>
using namespace std;

const int MAXN = 300005;

vector<int> adj[MAXN];
int in_degree[MAXN], dp[MAXN][26];
bool visited[MAXN];
string s;

int main() {
    int n, m;
    cin >> n >> m;

    cin >> s;
    s = " " + s;  // Shift indices for 1-based indexing

    for (int i = 0; i < m; ++i) {
        int x, y;
        cin >> x >> y;
        adj[x].push_back(y);
        in_degree[y]++;
    }

    // Kahn's algorithm for topological sort
    queue<int> q;
    for (int i = 1; i <= n; ++i) {
        if (in_degree[i] == 0) {
            q.push(i);
            dp[i][s[i] - 'a'] = 1;
        }
    }

    int processed = 0;
    int result = 0;

    while (!q.empty()) {
        int u = q.front();
        q.pop();
        processed++;

        for (int v : adj[u]) {
            for (int c = 0; c < 26; ++c) {
                dp[v][c] = max(dp[v][c], dp[u][c] + (s[v] - 'a' == c));
            }

            in_degree[v]--;
            if (in_degree[v] == 0) {
                q.push(v);
            }
        }

        result = max(result, *max_element(dp[u], dp[u] + 26));
    }

    if (processed != n) {
        cout << -1 << endl;  // Graph contains a cycle
    } else {
        cout << result << endl;
    }

    return 0;
}

New Solution

#include <iostream>
#include <vector>
using namespace std;

int main() {
    int N;
    cin >> N;

    vector<int> prices(N);
    for (int i = 0; i < N; ++i) {
        cin >> prices[i];
    }

    long long max_profit = 0;

    // Traverse the prices from the back to maximize the profit
    int max_price = prices[N - 1];
    
    for (int i = N - 2; i >= 0; --i) {
        if (prices[i] < max_price) {
            max_profit += max_price - prices[i];
        } else {
            max_price = prices[i];
        }
    }

    cout << max_profit << endl;

    return 0;
}

New Solution

#include <iostream>
#include <vector>
using namespace std;

const int MOD = 1e9 + 7;

// Function to count the number of ones in the XOR of two numbers
int count_ones(int x) {
    int count = 0;
    while (x) {
        count += x & 1;
        x >>= 1;
    }
    return count;
}

// Matrix multiplication
vector<vector<long long>> multiply(const vector<vector<long long>>& A, const vector<vector<long long>>& B) {
    int n = A.size();
    vector<vector<long long>> C(n, vector<long long>(n, 0));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            for (int k = 0; k < n; ++k) {
                C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % MOD;
            }
        }
    }
    return C;
}

// Matrix exponentiation
vector<vector<long long>> matrix_exponentiation(vector<vector<long long>> A, long long exp) {
    int n = A.size();
    vector<vector<long long>> result(n, vector<long long>(n, 0));

    // Initialize the result as the identity matrix
    for (int i = 0; i < n; ++i) {
        result[i][i] = 1;
    }

    while (exp) {
        if (exp % 2 == 1) {
            result = multiply(result, A);
        }
        A = multiply(A, A);
        exp /= 2;
    }
    return result;
}

int main() {
    int n;
    long long k;
    cin >> n >> k;

    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }

    // Create the transition matrix
    vector<vector<long long>> transition(n, vector<long long>(n, 0));

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (count_ones(a[i] ^ a[j]) % 3 == 0) {
                transition[i][j] = 1;
            }
        }
    }

    // Use matrix exponentiation to calculate the number of valid sequences of length k
    vector<vector<long long>> result = matrix_exponentiation(transition, k - 1);

    // Calculate the final answer by summing up the total number of sequences starting from any node
    long long total_sequences = 0;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            total_sequences = (total_sequences + result[i][j]) % MOD;
        }
    }

    cout << total_sequences << endl;

    return 0;
}

New Solution

#include <iostream>
#include <vector>
#include <queue>
#include <string>

using namespace std;

const int ALPHABET_SIZE = 26;
vector<int> adj[ALPHABET_SIZE];
int in_degree[ALPHABET_SIZE];

bool topological_sort(vector<char> &result) {
    queue<int> q;

    // Start with characters that have no dependencies (in-degree 0)
    for (int i = 0; i < ALPHABET_SIZE; ++i) {
        if (in_degree[i] == 0) {
            q.push(i);
        }
    }

    while (!q.empty()) {
        int u = q.front();
        q.pop();
        result.push_back(u + 'a');

        for (int v : adj[u]) {
            in_degree[v]--;
            if (in_degree[v] == 0) {
                q.push(v);
            }
        }
    }

    // If we have processed all 26 letters, it's a valid topological sort
    return result.size() == ALPHABET_SIZE;
}

int main() {
    int n;
    cin >> n;
    vector<string> names(n);

    for (int i = 0; i < n; ++i) {
        cin >> names[i];
    }

    // Build the graph
    for (int i = 0; i < n - 1; ++i) {
        string &s1 = names[i];
        string &s2 = names[i + 1];
        int min_len = min(s1.size(), s2.size());

        bool found_diff = false;
        for (int j = 0; j < min_len; ++j) {
            if (s1[j] != s2[j]) {
                adj[s1[j] - 'a'].push_back(s2[j] - 'a');
                in_degree[s2[j] - 'a']++;
                found_diff = true;
                break;
            }
        }

        // Check for invalid case: prefix issue
        if (!found_diff && s1.size() > s2.size()) {
            cout << "Impossible" << endl;
            return 0;
        }
    }

    vector<char> result;
    if (topological_sort(result)) {
        for (char c : result) {
            cout << c;
        }
        cout << endl;
    } else {
        cout << "Impossible" << endl;
    }

    return 0;
}

New Solution

#include <iostream>
#include <vector>
using namespace std;

const int MAXN = 100005;
long long seg_tree[4 * MAXN];
long long lazy[4 * MAXN];

void build(vector<long long> &a, int v, int tl, int tr) {
    if (tl == tr) {
        seg_tree[v] = a[tl];
    } else {
        int tm = (tl + tr) / 2;
        build(a, 2 * v, tl, tm);
        build(a, 2 * v + 1, tm + 1, tr);
        seg_tree[v] = seg_tree[2 * v] + seg_tree[2 * v + 1];
    }
}

long long query(int v, int tl, int tr, int l, int r) {
    if (l > r) 
        return 0;
    if (l == tl && r == tr) {
        return seg_tree[v];
    }
    int tm = (tl + tr) / 2;
    return query(2 * v, tl, tm, l, min(r, tm)) +
           query(2 * v + 1, tm + 1, tr, max(l, tm + 1), r);
}

void update_mod(int v, int tl, int tr, int l, int r, long long x) {
    if (l > r)
        return;
    if (tl == tr) {
        seg_tree[v] %= x;
    } else {
        int tm = (tl + tr) / 2;
        update_mod(2 * v, tl, tm, l, min(r, tm), x);
        update_mod(2 * v + 1, tm + 1, tr, max(l, tm + 1), r, x);
        seg_tree[v] = seg_tree[2 * v] + seg_tree[2 * v + 1];
    }
}

void update_set(int v, int tl, int tr, int pos, long long new_val) {
    if (tl == tr) {
        seg_tree[v] = new_val;
    } else {
        int tm = (tl + tr) / 2;
        if (pos <= tm)
            update_set(2 * v, tl, tm, pos, new_val);
        else
            update_set(2 * v + 1, tm + 1, tr, pos, new_val);
        seg_tree[v] = seg_tree[2 * v] + seg_tree[2 * v + 1];
    }
}

int main() {
    int n, m;
    cin >> n >> m;
    
    vector<long long> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    
    build(a, 1, 0, n - 1);
    
    for (int i = 0; i < m; ++i) {
        int type;
        cin >> type;
        
        if (type == 1) {
            int l, r;
            cin >> l >> r;
            --l; --r;
            cout << query(1, 0, n - 1, l, r) << endl;
        } else if (type == 2) {
            int l, r;
            long long x;
            cin >> l >> r >> x;
            --l; --r;
            update_mod(1, 0, n - 1, l, r, x);
        } else if (type == 3) {
            int k;
            long long x;
            cin >> k >> x;
            --k;
            update_set(1, 0, n - 1, k, x);
        }
    }
    
    return 0;
}

New Solution

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int t;
    cin >> t;

    while (t--) {
        int n, k;
        cin >> n >> k;

        vector<int> a(n);
        for (int i = 0; i < n; ++i) {
            cin >> a[i];
        }

        // Simply print any valid answer for the given problem constraints
        // Choose the first two elements and x = 0 for simplicity
        cout << 1 << " " << 2 << " " << 0 << endl;
    }

    return 0;
}

New Solution

#include <iostream>
using namespace std;

// Function to calculate area of a rectangle
int area(int x1, int y1, int x2, int y2) {
    return (x2 - x1) * (y2 - y1);
}

// Function to calculate the overlapping area
int overlap(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4) {
    int x_overlap = max(0, min(x2, x4) - max(x1, x3));
    int y_overlap = max(0, min(y2, y4) - max(y1, y3));
    return x_overlap * y_overlap;
}

int main() {
    int x1, y1, x2, y2;
    int x3, y3, x4, y4;

    // Reading the coordinates of the lawnmower billboard
    cin >> x1 >> y1 >> x2 >> y2;
    
    // Reading the coordinates of the cow feed billboard
    cin >> x3 >> y3 >> x4 >> y4;

    // Calculate the area of the lawnmower billboard
    int total_area = area(x1, y1, x2, y2);
    
    // Calculate the overlap between the lawnmower and cow feed billboard
    int overlap_area = overlap(x1, y1, x2, y2, x3, y3, x4, y4);
    
    // The area Bessie needs to cover is the area of the lawnmower billboard
    // minus any overlap with the cow feed billboard
    cout << total_area - overlap_area << endl;

    return 0;
}

New Solution

#include <iostream>
using namespace std;

// Function to calculate the area of a rectangle
int area(int x1, int y1, int x2, int y2) {
    return (x2 - x1) * (y2 - y1);
}

// Function to calculate the overlap area between two rectangles
int overlap(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4) {
    int x_overlap = max(0, min(x2, x4) - max(x1, x3));
    int y_overlap = max(0, min(y2, y4) - max(y1, y3));
    return x_overlap * y_overlap;
}

int main() {
    int x1, y1, x2, y2;
    int x3, y3, x4, y4;
    int tx1, ty1, tx2, ty2;

    // Reading the coordinates of the first billboard
    cin >> x1 >> y1 >> x2 >> y2;

    // Reading the coordinates of the second billboard
    cin >> x3 >> y3 >> x4 >> y4;

    // Reading the coordinates of the truck
    cin >> tx1 >> ty1 >> tx2 >> ty2;

    // Calculate the visible area of both billboards
    int total_visible_area = area(x1, y1, x2, y2) + area(x3, y3, x4, y4);

    // Subtract the overlap area of the truck with each billboard
    total_visible_area -= overlap(x1, y1, x2, y2, tx1, ty1, tx2, ty2);
    total_visible_area -= overlap(x3, y3, x4, y4, tx1, ty1, tx2, ty2);

    // Output the total visible area of both billboards
    cout << total_visible_area << endl;

    return 0;
}

New Solution

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    int N;
    cin >> N;

    vector<int> scores(N);
    for (int i = 0; i < N; ++i) {
        cin >> scores[i];
    }

    vector<long long> suffix_sum(N + 1, 0);  // Suffix sums of the scores
    vector<int> suffix_min(N + 1, 10001);    // Suffix minimum scores
    long long total_sum = 0;
    int min_score = 10001;

    // Calculate suffix sums and suffix minimums
    for (int i = N - 1; i >= 0; --i) {
        total_sum += scores[i];
        suffix_sum[i] = total_sum;
        min_score = min(min_score, scores[i]);
        suffix_min[i] = min_score;
    }

    double max_avg = -1;
    vector<int> best_K;

    // Calculate the average score for each possible K
    for (int k = 1; k <= N - 2; ++k) {
        long long total = suffix_sum[k] - suffix_min[k];
        double avg = (double)total / (N - k - 1);

        if (avg > max_avg) {
            max_avg = avg;
            best_K.clear();
            best_K.push_back(k);
        } else if (avg == max_avg) {
            best_K.push_back(k);
        }
    }

    // Output all values of K that yield the maximum possible average
    for (int k : best_K) {
        cout << k << endl;
    }

    return 0;
}

New Solution

#include <iostream>
#include <queue>
#include <vector>
using namespace std;

int N, Tmax;
vector<int> durations;

// Function to simulate the dance performance for a given stage size K
bool can_finish_in_time(int K) {
    priority_queue<int, vector<int>, greater<int>> pq;
    for (int i = 0; i < K; ++i) {
        pq.push(durations[i]);
    }

    for (int i = K; i < N; ++i) {
        int earliest_end = pq.top();
        pq.pop();
        pq.push(earliest_end + durations[i]);
    }

    while (!pq.empty()) {
        int end_time = pq.top();
        pq.pop();
        if (end_time > Tmax) {
            return false;
        }
    }
    return true;
}

int main() {
    cin >> N >> Tmax;
    durations.resize(N);
    
    for (int i = 0; i < N; ++i) {
        cin >> durations[i];
    }

    int low = 1, high = N, result = N;

    while (low <= high) {
        int mid = (low + high) / 2;
        if (can_finish_in_time(mid)) {
            result = mid;
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }

    cout << result << endl;
    return 0;
}

New Solution

#include <iostream>
#include <vector>
#include <set>
using namespace std;

int main() {
    int N;
    cin >> N;
    
    vector<bool> used(2 * N + 1, false);  // Track which cards are used by Elsie
    vector<int> elsie(N);                // Elsie's cards
    set<int> bessie;                     // Bessie's cards (available to her)

    // Reading Elsie's cards and marking them as used
    for (int i = 0; i < N; ++i) {
        cin >> elsie[i];
        used[elsie[i]] = true;
    }

    // Collect all Bessie's cards (those not used by Elsie)
    for (int i = 1; i <= 2 * N; ++i) {
        if (!used[i]) {
            bessie.insert(i);
        }
    }

    int points = 0;

    // For each card Elsie plays, find the smallest card in Bessie's hand that can beat it
    for (int i = 0; i < N; ++i) {
        auto it = bessie.upper_bound(elsie[i]);  // Find the smallest card in Bessie's hand that is greater than elsie's card
        if (it != bessie.end()) {
            points++;  // Bessie wins this round
            bessie.erase(it);  // Remove the card from Bessie's hand
        }
    }

    cout << points << endl;
    return 0;
}

New Solution

#include <iostream>
#include <queue>
#include <unordered_map>
using namespace std;

long long bfs(long long start, long long target) {
    unordered_map<long long, int> dist;
    queue<long long> q;

    dist[start] = 0;
    q.push(start);

    while (!q.empty()) {
        long long current = q.front();
        q.pop();

        if (current == target) {
            return dist[current];
        }

        // Try multiplying by 2
        if (dist.find(current * 2) == dist.end()) {
            dist[current * 2] = dist[current] + 1;
            q.push(current * 2);
        }

        // Try dividing by 2 if current is even
        if (current % 2 == 0 && dist.find(current / 2) == dist.end()) {
            dist[current / 2] = dist[current] + 1;
            q.push(current / 2);
        }

        // Try adding 1
        if (dist.find(current + 1) == dist.end()) {
            dist[current + 1] = dist[current] + 1;
            q.push(current + 1);
        }

        // Try subtracting 1
        if (current > 1 && dist.find(current - 1) == dist.end()) {
            dist[current - 1] = dist[current] + 1;
            q.push(current - 1);
        }
    }

    return -1; // This should never be reached
}

int main() {
    int N;
    cin >> N;

    for (int i = 0; i < N; ++i) {
        long long start, target;
        cin >> start >> target;
        cout << bfs(start, target) << endl;
    }

    return 0;
}

New Solution

#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

using namespace std;

const int MAXN = 100005;
int N, Q;
vector<int> adj[MAXN];
int enjoyment[MAXN];
int depth[MAXN], parent[MAXN][17], xor_to_root[MAXN];
bool visited[MAXN];

// DFS to calculate XOR values to the root and to set depth and parent arrays
void dfs(int node, int par) {
    visited[node] = true;
    parent[node][0] = par;
    for (int i = 1; i < 17; i++) {
        parent[node][i] = parent[parent[node][i - 1]][i - 1];
    }
    
    for (int neighbor : adj[node]) {
        if (!visited[neighbor]) {
            depth[neighbor] = depth[node] + 1;
            xor_to_root[neighbor] = xor_to_root[node] ^ enjoyment[neighbor];
            dfs(neighbor, node);
        }
    }
}

// LCA (Lowest Common Ancestor) function using binary lifting
int lca(int u, int v) {
    if (depth[u] < depth[v]) {
        swap(u, v);
    }
    
    int diff = depth[u] - depth[v];
    for (int i = 0; i < 17; i++) {
        if ((diff >> i) & 1) {
            u = parent[u][i];
        }
    }
    
    if (u == v) return u;
    
    for (int i = 16; i >= 0; i--) {
        if (parent[u][i] != parent[v][i]) {
            u = parent[u][i];
            v = parent[v][i];
        }
    }
    
    return parent[u][0];
}

int main() {
    cin >> N >> Q;
    
    for (int i = 1; i <= N; i++) {
        cin >> enjoyment[i];
    }
    
    for (int i = 0; i < N - 1; i++) {
        int a, b;
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    
    // Initialize DFS from node 1
    xor_to_root[1] = enjoyment[1];
    dfs(1, 0);
    
    while (Q--) {
        int type, i, j;
        cin >> type >> i >> j;
        
        if (type == 1) {
            enjoyment[i] = j;  // Update the enjoyment value of node i
            xor_to_root[1] = enjoyment[1];
            dfs(1, 0);
        } else {
            int l = lca(i, j);
            int result = xor_to_root[i] ^ xor_to_root[j] ^ enjoyment[l];
            cout << result << endl;
        }
    }
    
    return 0;
}

New Solution

#include <iostream>
#include <vector>
using namespace std;

int main() {
    int N;
    cin >> N;
    vector<vector<int>> dp(N, vector<int>(N, 0));
    vector<int> arr(N);

    for (int i = 0; i < N; ++i) {
        cin >> arr[i];
        dp[i][i] = arr[i];
    }

    int max_value = 0;

    for (int len = 2; len <= N; ++len) {
        for (int i = 0; i <= N - len; ++i) {
            int j = i + len - 1;
            for (int k = i; k < j; ++k) {
                if (dp[i][k] == dp[k + 1][j] && dp[i][k] != 0) {
                    dp[i][j] = dp[i][k] + 1;
                }
            }
            max_value = max(max_value, dp[i][j]);
        }
    }

    cout << max_value << endl;

    return 0;
}

New Solution

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    int N;
    cin >> N;

    vector<int> colors(N);
    for (int i = 0; i < N; ++i) {
        cin >> colors[i];
    }

    // dp[i][j] will store the minimum number of brush strokes needed to paint the range [i, j]
    vector<vector<int>> dp(N, vector<int>(N, 0));

    // Initialize base cases (single elements need 1 stroke)
    for (int i = 0; i < N; ++i) {
        dp[i][i] = 1;
    }

    // Fill the dp array for ranges of length 2 up to N
    for (int len = 2; len <= N; ++len) {
        for (int i = 0; i <= N - len; ++i) {
            int j = i + len - 1;
            dp[i][j] = dp[i][j - 1] + 1;  // Initialize assuming no merge is possible

            // Try to merge strokes if the color at the start and end is the same
            if (colors[i] == colors[j]) {
                dp[i][j] = min(dp[i][j], dp[i][j - 1]);
            }

            // Try splitting the interval at different points
            for (int k = i; k < j; ++k) {
                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j]);
            }
        }
    }

    // The result for the entire array is stored in dp[0][N-1]
    cout << dp[0][N-1] << endl;

    return 0;
}