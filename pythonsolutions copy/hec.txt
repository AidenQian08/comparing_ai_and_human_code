n, k = map(int, input().split())
arr = list(map(int, input().split()))
left = 0
right = 0
ans = 0
distinct = 0
freq = {}
while left < n:
	while right < n:
		if arr[right] not in freq and distinct == k:
			break

		# Put the new array element in the map.
		if arr[right] in freq:
			freq[arr[right]] += 1
		else:
			freq[arr[right]] = 1
			distinct += 1
		right += 1

	# Add the new subarrays.
	ans += right - left

	# Slide the window rightwards.
	freq[arr[left]] -= 1
	if freq[arr[left]] == 0:
		freq.pop(arr[left])
		distinct -= 1
	left += 1
print(ans)

New Solution

def solve():
    n = int(input())
    l = [input() for _ in range(4)]
    words = set()
    for a in range(4):
        for b in range(4):
            if a in [b]:
                continue
            for c in range(4):
                if c in [a, b]:
                    continue
                for d in range(4):
                    if d in [a, b, c]:
                        continue
                    for l1 in l[a]:
                        words.add(l1)
                        for l2 in l[b]:
                            words.add(l1+l2)
                            for l3 in l[c]:
                                words.add(l1+l2+l3)
                                for l4 in l[d]:
                                    words.add(l1+l2+l3+l4)
    for _ in range(n):
        print("YES" if input() in words else "NO")
 
solve()

New Solution

import sys

sys.stdin = open("closing.in", "r")
sys.stdout = open("closing.out", "w")

n, m = map(int, input().split())

adj, order = {}, []
for i in range(1, n + 1):
	adj[i] = []

visited, closed = [False] * (n + 1), [False] * (n + 1)
nodes = 0


def dfs(node):
	global nodes
	if visited[node] or closed[node]:
		return

	# Visit this node if it isn't closed and we haven't visited it yet.
	nodes += 1
	visited[node] = True

	for u in adj[node]:
		if not visited[u]:
			dfs(u)


# Read in adjacency list.
for i in range(m):
	a, b = map(int, input().split())
	adj[a].append(b)
	adj[b].append(a)

for i in range(n):
	order.append(int(input()))

dfs(1)

"""
The farm is initially connected if we've visited every node
before any of the farms are closed.
"""
print("YES") if nodes == n else print("NO")

for i in range(n - 1):
	visited = [False] * (n + 1)
	nodes = 0
	closed[order[i]] = True

	# Start DFS from the barn that will close last.
	dfs(order[n - 1])

	# Have we visited all the unclosed barns?
	if nodes == n - i - 1:
		print("YES")
	else:
		print("NO")

New Solution

import heapq

with open("pump.in", "r") as infile:
	n, m = map(int, infile.readline().split())

	graph = [[] for _ in range(n)]
	flow_rates = []

	for _ in range(m):
		a, b, c, f = map(int, infile.readline().split())
		graph[a - 1].append((b - 1, c, f))
		graph[b - 1].append((a - 1, c, f))
		flow_rates.append(f)


def dijkstra(flow_rate: int) -> float:

	cost = [float("inf")] * n
	cost[0] = 0  # start at FJ's farm
	queue = [(0, 0)]
	completed = set()

	while queue:
		curr_cost, curr_node = heapq.heappop(queue)

		if curr_node in completed:
			continue
		completed.add(curr_node)

		for adj_node, pipe_cost, pipe_flow in graph[curr_node]:
			# we ignore all routes with flow rates less than our set rate
			if pipe_flow < flow_rate:
				continue
			new_cost = curr_cost + pipe_cost
			if new_cost < cost[adj_node]:
				cost[adj_node] = new_cost
				heapq.heappush(queue, (cost[adj_node], adj_node))

	return 0 if cost[n - 1] == float("inf") else flow_rate / cost[n - 1]


max_worth = 0
for flow_rate in flow_rates:
	worth = dijkstra(flow_rate)
	if worth > max_worth:
		max_worth = worth

print(int(max_worth * 10**6), file=open("pump.out", "w"))

New Solution

with open("milkvisits.in") as read:
	farm_num, query_num = [int(i) for i in read.readline().split()]
	farms = read.readline()
	neighbors = [[] for _ in range(farm_num)]
	for f in range(farm_num - 1):
		f1, f2 = [int(i) - 1 for i in read.readline().split()]
		neighbors[f1].append(f2)
		neighbors[f2].append(f1)

	queries = []
	for _ in range(query_num):
		query = read.readline().split()
		query[0], query[1] = int(query[0]) - 1, int(query[1]) - 1
		queries.append(query)

# Process the tree & detect the different components
component_num = 0
component = [-1 for _ in range(farm_num)]
for f in range(farm_num):
	# Don't process a farm if it's been visited already
	if component[f] != -1:
		continue
	frontier = [f]
	curr_type = farms[f]
	while frontier:
		curr = frontier.pop()
		# Assign the current component number to the farm
		component[curr] = component_num
		for n in neighbors[curr]:
			# Visit a neighbor if it's new & is of the same type
			if farms[n] == curr_type and component[n] == -1:
				frontier.append(n)
	component_num += 1

with open("milkvisits.out", "w") as written:
	for a, b, milk in queries:
		if component[a] == component[b]:
			"""
			If a & b are in the same component,
			check if the milk type is the same as the one the farmer likes
			"""
			print(1 if farms[a] == milk else 0, end="", file=written)
		else:
			# Output 1 otherwise because both milk types will be visited
			print(1, end="", file=written)
	print(file=written)

New Solution

import sys

sys.stdin = open("moobuzz.in", "r")
sys.stdout = open("moobuzz.out", "w")

N = int(input())

# Lists the first 8.
# 14 is in the zeroth position since if were trying to find the
# eighth number, 8 % 8 = 0.
first8 = [14, 1, 2, 4, 7, 8, 11, 13]

# Finds the group.
ans = (N - 1) // 8

# Distance away N is from the first 8.
ans *= 15

# Adds the corresponding element.
ans += first8[N % 8]

print(ans)

New Solution

from typing import List
from sys import setrecursionlimit

setrecursionlimit(10**5)


class Cow:
	def __init__(self, x: int, y: int, adj: List[int], visited: bool) -> None:
		self.x = x
		self.y = y
		self.adj = adj
		self.visited = visited


def connected_cows(cows: List[Cow], start: int) -> List[Cow]:
	net = []

	def dfs(curr: int) -> None:
		cows[curr].visited = True
		net.append(curr)
		for c in cows[curr].adj:
			if not cows[c].visited:
				dfs(c)

	dfs(start)
	return net


cows = []
with open("fenceplan.in") as read:
	n, m = [int(i) for i in read.readline().split()]

	for _ in range(n):
		x, y = [int(i) for i in read.readline().split()]
		cows.append(Cow(x, y, [], False))

	for _ in range(m):
		a, b = [int(i) - 1 for i in read.readline().split()]
		cows[a].adj.append(b)
		cows[b].adj.append(a)

networks = []
for c in range(n):
	if not cows[c].visited:
		networks.append(connected_cows(cows, c))

min_perimeter = float("inf")
for net in networks:
	min_x = float("inf")
	max_x = 0
	min_y = float("inf")
	max_y = 0
	for c in net:
		c = cows[c]
		min_x = min(min_x, c.x)
		max_x = max(max_x, c.x)
		min_y = min(min_y, c.y)
		max_y = max(max_y, c.y)

	min_perimeter = min(min_perimeter, 2 * (max_x - min_x) + 2 * (max_y - min_y))

print(min_perimeter, file=open("fenceplan.out", "w"))

New Solution

read = open("shell.in")

n = int(read.readline())

# shell_at_pos[i] stores the label of the shell located at position i
# The shells can be placed arbitrarily at the start.
shell_at_pos = [i for i in range(3)]

# counter[i] stores the number of times the shell with label i was picked
counter = [0 for _ in range(3)]

for _ in range(n):
	# Zero indexing: offset all positions by 1
	a, b, g = [int(i) - 1 for i in read.readline().split()]

	# Perform Bessie's swapping operation
	shell_at_pos[a], shell_at_pos[b] = shell_at_pos[b], shell_at_pos[a]

	# Count the number of times Elsie guesses each particular shell
	counter[shell_at_pos[g]] += 1

print(max(counter), file=open("shell.out", "w"))

New Solution

MAX_TIME = 1000

with open("blist.in") as read:
	n = int(read.readline())
	cows = [[int(i) for i in read.readline().split()] for _ in range(n)]

# The maximum number of buckets needed
max_buckets = 0

"""
For each possible time, check how many buckets are needed at that time
and update the maximum accordingly
"""
for t in range(1, MAX_TIME + 1):
	curr_buckets = 0
	for c in cows:
		if c[0] <= t <= c[1]:
			curr_buckets += c[2]
	max_buckets = max(max_buckets, curr_buckets)

print(max_buckets, file=open("blist.out", "w"))

New Solution

N = 3  # The number of buckets (which is 3)
TURN_NUM = 100

# capacity[i] is the maximum capacity of bucket i
capacity = [0 for _ in range(N)]
# milk[i] is the current amount of milk in bucket i
milk = [0 for _ in range(N)]
with open("mixmilk.in") as read:
	for i in range(N):
		capacity[i], milk[i] = map(int, read.readline().split())

for i in range(TURN_NUM):
	bucket1 = i % N
	bucket2 = (i + 1) % N

	"""
	The amount of milk to pour is the minimum of the remaining milk
	in bucket 1 and the available capacity of bucket 2
	"""
	amt = min(milk[bucket1], capacity[bucket2] - milk[bucket2])

	milk[bucket1] -= amt
	milk[bucket2] += amt

with open("mixmilk.out", "w") as out:
	for m in milk:
		print(m, file=out)

New Solution

import sys

sys.stdin = open("lemonade.in", "r")
sys.stdout = open("lemonade.out", "w")

n = int(input())
cows = list(map(int, input().split()))
cows.sort(reverse=True)
ans = 0

for i in range(n):
	if i <= cows[i]:
		ans += 1
	else:
		break

print(ans)

New Solution

with open("reststops.in") as read:
	# trail_len won't be used
	trail_len, stop_num, f_rate, b_rate = [int(i) for i in read.readline().split()]

	x = []  # position of each stop
	c = []  # tastiness value of each stop
	for _ in range(stop_num):
		a, b = [int(i) for i in read.readline().split()]
		x.append(a)
		c.append(b)

# find all the "best" stops
good = [False for _ in range(stop_num)]
max_tastiness = 0
for i in range(stop_num - 1, -1, -1):
	if c[i] > max_tastiness:
		# there are no stops after stop i that are "better"
		good[i] = True
		max_tastiness = c[i]

# simulate the whole trail
prev_stop_pos = 0
ans = 0
for i in range(stop_num):
	if good[i]:
		travel_dist = x[i] - prev_stop_pos
		f_time = travel_dist * f_rate
		b_time = travel_dist * b_rate
		rest_time = f_time - b_time
		ans += rest_time * c[i]
		prev_stop_pos = x[i]

print(ans, file=open("reststops.out", "w"))

New Solution

import sys

sys.setrecursionlimit(int(1e9))


def search_videos(v: int, threshold: int) -> None:
	"""Searches all vertices that can be reached through the current vertex v"""
	global num_reachable
	visited[v] = True
	for n in neighbors[v]:
		# Only visit non-visited vertices whose relevance is greater than the current threshold
		if not visited[n[0]] and n[1] >= threshold:
			num_reachable += 1
			search_videos(n[0], threshold)


with open("mootube.in", "r") as read:
	with open("mootube.out", "w") as write:
		neighbors = []
		visited = []
		num_reachable = 0
		video_num, query_num = map(int, read.readline().split())
		neighbors = [[] for _ in range(video_num + 1)]
		for _ in range(video_num - 1):
			a, b, relevance = map(int, read.readline().split())
			a -= 1
			b -= 1
			neighbors[a].append((b, relevance))
			neighbors[b].append((a, relevance))

		for _ in range(query_num):
			threshold, start = map(int, read.readline().split())
			start -= 1

			# Reset global variables for the current query
			num_reachable = 0
			visited = [False] * video_num
			search_videos(start, threshold)

			write.write(f"{num_reachable}\n")

New Solution

SHUFFLE_NUM = 3

with open("shuffle.in") as read:
	n = int(read.readline())
	shuffle = list(map(int, read.readline().split()))
	ids = list(map(int, read.readline().split()))

for _ in range(SHUFFLE_NUM):
	past_order = [0] * n
	for i in range(n):
		# -1 because the shuffle input starts from 1
		past_order[i] = ids[shuffle[i] - 1]
	ids = past_order.copy()

with open("shuffle.out", "w") as written:
	for i in past_order:
		print(i, file=written)

New Solution

MAXN = 10**6
MOD = 10**9 + 7

fac = [0] * (MAXN + 1)
inv = [0] * (MAXN + 1)


# BeginCodeSnip{Combinatorics Functions (from the module)}
def exp(x: int, n: int, m: int) -> int:
	x %= m
	res = 1
	while n > 0:
		if n % 2 == 1:
			res = res * x % m
		x = x * x % m
		n //= 2
	return res


def factorial():
	fac[0] = 1
	for i in range(1, MAXN + 1):
		fac[i] = fac[i - 1] * i % MOD


def inverses():
	inv[MAXN] = exp(fac[MAXN], MOD - 2, MOD)
	for i in range(MAXN, 0, -1):
		inv[i - 1] = inv[i] * i % MOD


def choose(n: int, r: int):
	return fac[n] * inv[r] % MOD * inv[n - r] % MOD


# EndCodeSnip

n = int(input())

if n % 2 != 0:
	print(0)
else:
	factorial()
	inverses()
	result = exp(n // 2 + 1, MOD - 2, MOD) * choose(n, n // 2) % MOD
	print(result)

New Solution

n = int(input())
money = list(map(int, input().split()))

max_sum = n * 1000
dp = [[False] * (max_sum + 1) for _ in range(n + 1)]
dp[0][0] = True

for i in range(1, n + 1):
	for j in range(max_sum + 1):
		dp[i][j] = dp[i - 1][j]
		left = j - money[i - 1]
		if left >= 0 and dp[i - 1][left]:
			dp[i][j] = True

res = [i for i in range(1, max_sum + 1) if dp[n][i]]

print(len(res))
print(*res)

New Solution

MOD = int(1e9) + 7
MAXN = int(2e6)

fac: list = [1 for _ in range(MAXN)]
inv: list = [1 for _ in range(MAXN)]


def binpow(x: int, n: int, m: int) -> int:
	"""
	Computes x^n modulo m in O(log p) time.
	See also: https://usaco.guide/gold/modular
	"""
	x %= m
	res: int = 1
	while n > 0:
		if n % 2 == 1:
			res = res * x % m
		x = x * x % m
		n //= 2

	return res


def binom(n: int, k: int) -> int:
	return fac[n] * inv[k] % MOD * inv[n - k] % MOD


for i in range(2, MAXN):
	fac[i] = i * fac[i - 1] % MOD

# Calculate the modular inverse with exponentiation
inv[MAXN - 1] = binpow(fac[MAXN - 1], MOD - 2, MOD)
# Calculate the modular inverse with factorial definition
for i in reversed(range(1, MAXN - 1)):
	inv[i] = (i + 1) * inv[i + 1] % MOD

(n, m) = map(int, input().split())
print(binom(n + m - 1, n - 1))

New Solution

import sys

input = sys.stdin.readline  # speed up input to not TLE

# BeginCodeSnip{Disjoint Set Union}
class DisjointSetUnion:
	def __init__(self, num_nodes: int) -> None:
		self.parent = [*range(num_nodes)]
		self.size = [1] * num_nodes

	def find_parent(self, v: int) -> int:
		if self.parent[v] == v:
			return v
		self.parent[v] = self.find_parent(self.parent[v])
		return self.parent[v]

	def union(self, a: int, b: int) -> bool:
		a = self.find_parent(a)
		b = self.find_parent(b)
		if a == b:
			return False
		if self.size[a] < self.size[b]:
			a, b = b, a
		self.parent[b] = a
		self.size[a] += self.size[b]
		return True

	def connected(self, a: int, b: int) -> bool:
		return self.find_parent(a) == self.find_parent(b)


# EndCodeSnip

n, m = map(int, input().split())

cities = DisjointSetUnion(n)
largest_size = 1
components = n

for _ in range(m):
	a, b = map(lambda i: int(i) - 1, input().split())
	if cities.union(a, b):
		components -= 1

	# a is the parent node when uniting in our dsu implementation
	size_a = cities.size[cities.find_parent(a)]
	if size_a > largest_size:
		largest_size = size_a

	print(components, largest_size)

New Solution

import sys

sys.setrecursionlimit(200006)  # set recursion limit


def dfs(x):  # x is the current node
	ans = 0  # stores the number of subordinates
	for e in edges[x]:
		if e != fa[x - 1]:
			ans += dfs(e)
	sub[x - 1] = ans  # 0-index is more convenient for printing
	return ans + 1  # add the node x itself


N = int(input())
edges = [[] for _ in range(N + 1)]  # create empty adjacency list
sub = [0 for _ in range(N)]  # the number of subordinates
fa = [1] + list(
	map(int, input().split())
)  # the parent of each node, set the parent of node 1 to itself
for ind, f in enumerate(fa):
	edges[f].append(ind + 1)  # add edges to the adjacency list
dfs(1)
for i in sub:
	print(i, end=" ")

New Solution

import sys

sys.setrecursionlimit(10**5)  # Python has a default recursion limit of 1000

n = 6
visited = [False] * n

"""
Define adjacency list and read in problem-specific input here.

In this example, we've provided "dummy input" that's
reflected in the GIF above to help illustrate the
order of the recrusive calls.
"""
adj = [[] for _ in range(n)]
adj[0] = [1, 2, 4]
adj[1] = [3, 4]
adj[2] = [5]


def dfs(current_node):
	visited[current_node] = True
	for neighbor in adj[current_node]:
		if not visited[neighbor]:
			dfs(neighbor)


for i in range(n):
	if not visited[i]:
		dfs(i)

New Solution

n = int(input())
arr = map(int, input().split())

residue_counts = [0] * n
partial_sum = 0
residue_counts[partial_sum] = 1
for a in arr:
	partial_sum += a
	partial_sum = partial_sum % n
	residue_counts[partial_sum] += 1

# each subarray with sum divisible by n corresponds to
# a pair of indices that have the same residue
print(sum(r * (r - 1) // 2 for r in residue_counts))

New Solution

def main():
	N, X = map(int, input().split())
	prefix, res = 0, 0
	mp = {0: 1}  # mp[0] = 1

	for x in input().split():
		prefix += int(x)
		res += mp.get(prefix - X, 0)  # if not in dict, return 0
		mp[prefix] = mp.get(prefix, 0) + 1
	print(res)


main()

New Solution

n, q = map(int, input().split())
arr = list(map(int, input().split()))

xor_arr = [0] * (n + 1)
for i in range(1, n + 1):
	xor_arr[i] = arr[i - 1] ^ xor_arr[i - 1]

for _ in range(q):
	a, b = map(int, input().split())
	print(xor_arr[b] ^ xor_arr[a - 1])

New Solution

n, x = map(int, input().split())
a = list(map(int, input().split()))

p = [(a[i], i + 1) for i in range(n)]

p.sort()

for i in range(n):
	left = 0
	right = n - 1

	while left < right:
		target = x - p[i][0]

		"""
		if the values sum to the target and aren't from the same index,
		we have found the answer
		"""
		if left != i and right != i and p[left][0] + p[right][0] == target:
			print(p[left][1], p[right][1], p[i][1])
			exit()

		# increase left if the sum is lower
		elif p[left][0] + p[right][0] < target:
			left += 1

		# otherwise decrease right
		else:
			right -= 1

print("IMPOSSIBLE")

New Solution

import sys

n, target = map(int, input().split())
values = [int(x) for x in input().split()]

# use a map to avoid using a very large array
val_to_ind = {}
for i, val in enumerate(values):
	# target minus a number is the other number
	if target - val in val_to_ind:
		print(i + 1, val_to_ind[target - val])
		sys.exit(0)
	val_to_ind[val] = i + 1

print("IMPOSSIBLE")